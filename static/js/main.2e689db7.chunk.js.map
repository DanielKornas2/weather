{"version":3,"sources":["components/SearchCity/SearchCity.js","containers/WeatherBox/WeatherBox.js","App.js","serviceWorker.js","index.js","components/SearchCity/SearchCity.module.css","containers/WeatherBox/WeatherBox.module.css"],"names":["SearchCity","props","react_default","a","createElement","type","value","city","onChange","handleChange","className","styles","searchBox","APIKey","WeatherBox","state","isCityCorrect","weather","humidity","sunrise","sunset","temperature","wind","fetchData","apiUrl","concat","_this","fetch","then","response","ok","json","Error","statusText","result","Date","sys","toLocaleTimeString","setState","main","temp","speed","catch","error","prevState","console","log","e","target","this","prevProps","_this$state","components_SearchCity_SearchCity","Component","App","containers_WeatherBox_WeatherBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"qRAUeA,EANI,SAACC,GAChB,OACIC,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOC,MAAOL,EAAMM,KAAMC,SAAUP,EAAMQ,aAAcC,UAAWC,IAAOC,6BCDxFC,EAAS,mCA2FAC,6MAvFbC,MAAQ,CACNR,KAAM,YACNS,eAAe,EACfC,QAAS,CACPC,SAAU,KACVC,QAAS,KACTC,OAAQ,KACRC,YAAa,KACbC,KAAM,SAIVC,UAAY,WAEV,IAAMC,EAAM,qDAAAC,OAAwDC,EAAKX,MAAMR,KAAnE,WAAAkB,OAAiFZ,EAAjF,iBAEZc,MAAOH,GACJI,KAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAElB,MAAMC,MAAMH,EAASI,cAEtBL,KAAK,SAAAM,GAEJ,IAAMf,EAAU,IAAIgB,KAA0B,IAArBD,EAAOE,IAAIjB,SAAgBkB,qBAC9CjB,EAAS,IAAIe,KAAyB,IAApBD,EAAOE,IAAIhB,QAAeiB,qBAClDX,EAAKY,SAAS,CACZtB,eAAe,EACfC,QAAS,CACPC,SAAUgB,EAAOK,KAAKrB,SACtBC,QAASA,EACTC,OAAQA,EACRC,YAAaa,EAAOK,KAAKC,KACzBlB,KAAMY,EAAOZ,KAAKmB,WAIvBC,MAAM,SAAAC,GACLjB,EAAKY,SAAS,SAAAM,GAAS,MAAK,CAC1B5B,eAAe,EACfT,KAAMqC,EAAUrC,QAElBsC,QAAQC,IAAIH,QAIlBlC,aAAe,SAACsC,GACdrB,EAAKY,SAAS,CACZ/B,KAAMwC,EAAEC,OAAO1C,4FAMjB2C,KAAK1B,uDAGY2B,EAAUN,GACvBA,EAAUrC,OAAS0C,KAAKlC,MAAMR,MAChC0C,KAAK1B,6CAIC,IAAA4B,EAE+BF,KAAKlC,MAArCR,EAFC4C,EAED5C,KAAMS,EAFLmC,EAEKnC,cAAeC,EAFpBkC,EAEoBlC,QAE5B,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgD,EAAD,CAAY7C,KAAMA,EAAME,aAAcwC,KAAKxC,eAC1CO,EACCd,EAAAC,EAAAC,cAAA,MAAIM,UAAWC,IAAOuB,QACpBhC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,yBAAJ,IAA8BG,GAC9BL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,8BAAJ,IAAmCa,EAAQI,YAA3C,UACAnB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,uCAAJ,IAAkCa,EAAQC,SAA1C,KACAhB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,6CAAJ,IAAqCa,EAAQE,SAC7CjB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,6CAAJ,IAAqCa,EAAQG,SAG/ClB,EAAAC,EAAAC,cAAA,iEAlFeiD,aCQVC,mLARX,OACEpD,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAACmD,EAAD,cAJUF,aCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC,kCElInBC,EAAAC,QAAA,CAAkB5D,UAAA,kDCAlB2D,EAAAC,QAAA,CAAkB5D,UAAA,8BAAAsB,OAAA","file":"static/js/main.2e689db7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport styles from './SearchCity.module.css'\r\n\r\nconst SearchCity = (props) => {\r\n    return ( \r\n        <input type=\"text\" value={props.city} onChange={props.handleChange} className={styles.searchBox} />\r\n     );\r\n}\r\n \r\nexport default SearchCity;","import React, { Component } from 'react';\r\n\r\nimport SearchCity from '../../components/SearchCity/SearchCity';\r\nimport styles from './WeatherBox.module.css';\r\n\r\nconst APIKey = 'd51e075ba6694ea2f6e480ed41f66ee7';\r\n\r\nclass WeatherBox extends Component {\r\n\r\n  state = {\r\n    city: \"Kraków\",\r\n    isCityCorrect: true,\r\n    weather: {\r\n      humidity: null,\r\n      sunrise: null,\r\n      sunset: null,\r\n      temperature: null,\r\n      wind: null\r\n    } \r\n  }\r\n\r\n  fetchData = () => {\r\n\r\n    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=${APIKey}&units=metric`\r\n\r\n    fetch (apiUrl)\r\n      .then(response => {\r\n        if (response.ok){ \r\n          return response.json()\r\n        }\r\n        throw Error(response.statusText);\r\n      })\r\n      .then(result => {\r\n        //convert unix value to correct time\r\n        const sunrise = new Date(result.sys.sunrise * 1000).toLocaleTimeString();\r\n        const sunset = new Date(result.sys.sunset * 1000).toLocaleTimeString();\r\n        this.setState({\r\n          isCityCorrect: true,\r\n          weather: {\r\n            humidity: result.main.humidity,\r\n            sunrise: sunrise,\r\n            sunset: sunset,\r\n            temperature: result.main.temp,\r\n            wind: result.wind.speed\r\n          }\r\n        })\r\n      })\r\n      .catch(error => {\r\n        this.setState(prevState => ({\r\n          isCityCorrect: false,\r\n          city: prevState.city\r\n        }))\r\n        console.log(error)\r\n      })\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      city: e.target.value\r\n    })\r\n  }\r\n\r\n  componentDidMount(){\r\n    // first fetch - default city in app is Kraków\r\n    this.fetchData();\r\n  }\r\n\r\n  componentDidUpdate(prevProps,prevState){\r\n    if (prevState.city !== this.state.city){\r\n      this.fetchData();\r\n    }\r\n  }\r\n\r\n   render() {\r\n\r\n    const {city, isCityCorrect, weather} = this.state;\r\n\r\n    return (\r\n      <div>  \r\n        <SearchCity city={city} handleChange={this.handleChange} />\r\n        {isCityCorrect ? \r\n          <ul className={styles.result}>\r\n            <li><strong>Miasto:</strong> {city}</li>\r\n            <li><strong>Temperatura:</strong> {weather.temperature}&#8451;</li>\r\n            <li><strong>Wilgotność:</strong> {weather.humidity}%</li>\r\n            <li><strong>Wschód słońca:</strong> {weather.sunrise}</li>\r\n            <li><strong>Zachód słońca:</strong> {weather.sunset}</li>\r\n          </ul>\r\n        :\r\n          <p>Podaj prawidłową nazwę miasta</p>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherBox;\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport WeatherBox from './containers/WeatherBox/WeatherBox';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WeatherBox />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBox\":\"SearchCity_searchBox__xDX8B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBox\":\"WeatherBox_searchBox__3b9ov\",\"result\":\"WeatherBox_result__3WeGf\"};"],"sourceRoot":""}